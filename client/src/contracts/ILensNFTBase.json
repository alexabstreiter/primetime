{
  "contractName": "ILensNFTBase",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.EIP712Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.EIP712Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "permitForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.EIP712Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "burnWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"burnWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"permitForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lens Protocol\",\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenId\":\"The token ID of the token to burn.\"}},\"burnWithSig(uint256,(uint8,bytes32,bytes32,uint256))\":{\"params\":{\"sig\":\"The EIP712 signature struct.\",\"tokenId\":\"The token ID of the token to burn.\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"bytes32 The domain separator.\"}},\"permit(address,uint256,(uint8,bytes32,bytes32,uint256))\":{\"params\":{\"sig\":\"The EIP712 signature struct.\",\"spender\":\"The NFT spender.\",\"tokenId\":\"The NFT token ID to approve.\"}},\"permitForAll(address,address,bool,(uint8,bytes32,bytes32,uint256))\":{\"params\":{\"approved\":\"Whether to approve or revoke approval from the operator.\",\"operator\":\"The operator to approve.\",\"owner\":\"The owner to set operator approvals for.\",\"sig\":\"The EIP712 signature struct.\"}}},\"title\":\"ILensNFTBase\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burns an NFT, removing it from circulation and essentially destroying it. This function can only be called by the NFT to burn's owner.\"},\"burnWithSig(uint256,(uint8,bytes32,bytes32,uint256))\":{\"notice\":\"Implementation of an EIP-712 permit-style function for token burning. Allows anyone to burn a token on behalf of the owner with a signature.\"},\"getDomainSeparator()\":{\"notice\":\"Returns the domain separator for this NFT contract.\"},\"permit(address,uint256,(uint8,bytes32,bytes32,uint256))\":{\"notice\":\"Implementation of an EIP-712 permit function for an ERC-721 NFT. We don't need to check if the tokenId exists, since the function calls ownerOf(tokenId), which reverts if the tokenId does not exist.\"},\"permitForAll(address,address,bool,(uint8,bytes32,bytes32,uint256))\":{\"notice\":\"Implementation of an EIP-712 permit-style function for ERC-721 operator approvals. Allows an operator address to control all NFTs a given owner owns.\"}},\"notice\":\"This is the interface for the LensNFTBase contract, from which all Lens NFTs inherit. It is an expansion of a very slightly modified ERC721Enumerable contract, which allows expanded meta-transaction functionality.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/ILensNFTBase.sol\":\"ILensNFTBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/interfaces/ILensNFTBase.sol\":{\"keccak256\":\"0xdcdca0d7c1f7470dd412f150f6e776c84869b8220c8b7865d3a73ab587d49bd2\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://028e83217801374b8693ea512013351b9260e576075deea249ce6dee72c43cb4\",\"dweb:/ipfs/QmVMD5AkJb13gvnrGpit3BGBrLKVYQuqB81XbE8aNsfKx3\"]},\"project:/contracts/libraries/DataTypes.sol\":{\"keccak256\":\"0xe32aa4c54612e6826b9426c33a526e155ebb0bf30197f597ad7b4f47f1f8eca5\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://f0b32e5c10cdd390af72e01ac7ec4455e5bcb0365d813b50566b775f140452b3\",\"dweb:/ipfs/QmYDuiCxa7TEiZzkwLnJBFNS96WZ2XD4dBpNWtjzBjhCVc\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity 0.8.10;\n\nimport {DataTypes} from '../libraries/DataTypes.sol';\n\n/**\n * @title ILensNFTBase\n * @author Lens Protocol\n *\n * @notice This is the interface for the LensNFTBase contract, from which all Lens NFTs inherit.\n * It is an expansion of a very slightly modified ERC721Enumerable contract, which allows expanded\n * meta-transaction functionality.\n */\ninterface ILensNFTBase {\n    /**\n     * @notice Implementation of an EIP-712 permit function for an ERC-721 NFT. We don't need to check\n     * if the tokenId exists, since the function calls ownerOf(tokenId), which reverts if the tokenId does\n     * not exist.\n     *\n     * @param spender The NFT spender.\n     * @param tokenId The NFT token ID to approve.\n     * @param sig The EIP712 signature struct.\n     */\n    function permit(\n        address spender,\n        uint256 tokenId,\n        DataTypes.EIP712Signature calldata sig\n    ) external;\n\n    /**\n     * @notice Implementation of an EIP-712 permit-style function for ERC-721 operator approvals. Allows\n     * an operator address to control all NFTs a given owner owns.\n     *\n     * @param owner The owner to set operator approvals for.\n     * @param operator The operator to approve.\n     * @param approved Whether to approve or revoke approval from the operator.\n     * @param sig The EIP712 signature struct.\n     */\n    function permitForAll(\n        address owner,\n        address operator,\n        bool approved,\n        DataTypes.EIP712Signature calldata sig\n    ) external;\n\n    /**\n     * @notice Burns an NFT, removing it from circulation and essentially destroying it. This function can only\n     * be called by the NFT to burn's owner.\n     *\n     * @param tokenId The token ID of the token to burn.\n     */\n    function burn(uint256 tokenId) external;\n\n    /**\n     * @notice Implementation of an EIP-712 permit-style function for token burning. Allows anyone to burn\n     * a token on behalf of the owner with a signature.\n     *\n     * @param tokenId The token ID of the token to burn.\n     * @param sig The EIP712 signature struct.\n     */\n    function burnWithSig(uint256 tokenId, DataTypes.EIP712Signature calldata sig) external;\n\n    /**\n     * @notice Returns the domain separator for this NFT contract.\n     *\n     * @return bytes32 The domain separator.\n     */\n    function getDomainSeparator() external view returns (bytes32);\n}\n",
  "sourcePath": "/Users/korbinianabstreiter/crytoprojects/primetime/contracts/interfaces/ILensNFTBase.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/ILensNFTBase.sol",
    "exportedSymbols": {
      "DataTypes": [
        12894
      ],
      "ILensNFTBase": [
        12523
      ]
    },
    "id": 12524,
    "license": "AGPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 12474,
        "literals": [
          "solidity",
          "0.8",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "43:23:52"
      },
      {
        "absolutePath": "project:/contracts/libraries/DataTypes.sol",
        "file": "../libraries/DataTypes.sol",
        "id": 12476,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 12524,
        "sourceUnit": 12895,
        "src": "68:53:52",
        "symbolAliases": [
          {
            "foreign": {
              "id": 12475,
              "name": "DataTypes",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "76:9:52",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ILensNFTBase",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 12477,
          "nodeType": "StructuredDocumentation",
          "src": "123:289:52",
          "text": " @title ILensNFTBase\n @author Lens Protocol\n @notice This is the interface for the LensNFTBase contract, from which all Lens NFTs inherit.\n It is an expansion of a very slightly modified ERC721Enumerable contract, which allows expanded\n meta-transaction functionality."
        },
        "fullyImplemented": false,
        "id": 12523,
        "linearizedBaseContracts": [
          12523
        ],
        "name": "ILensNFTBase",
        "nameLocation": "423:12:52",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 12478,
              "nodeType": "StructuredDocumentation",
              "src": "442:383:52",
              "text": " @notice Implementation of an EIP-712 permit function for an ERC-721 NFT. We don't need to check\n if the tokenId exists, since the function calls ownerOf(tokenId), which reverts if the tokenId does\n not exist.\n @param spender The NFT spender.\n @param tokenId The NFT token ID to approve.\n @param sig The EIP712 signature struct."
            },
            "functionSelector": "7ef67f99",
            "id": 12488,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "permit",
            "nameLocation": "839:6:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12486,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12480,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "863:7:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12488,
                  "src": "855:15:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12479,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "855:7:52",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12482,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "888:7:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12488,
                  "src": "880:15:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12481,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "880:7:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12485,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "940:3:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12488,
                  "src": "905:38:52",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_EIP712Signature_$12669_calldata_ptr",
                    "typeString": "struct DataTypes.EIP712Signature"
                  },
                  "typeName": {
                    "id": 12484,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12483,
                      "name": "DataTypes.EIP712Signature",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12669,
                      "src": "905:25:52"
                    },
                    "referencedDeclaration": 12669,
                    "src": "905:25:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_EIP712Signature_$12669_storage_ptr",
                      "typeString": "struct DataTypes.EIP712Signature"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "845:104:52"
            },
            "returnParameters": {
              "id": 12487,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "958:0:52"
            },
            "scope": 12523,
            "src": "830:129:52",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12489,
              "nodeType": "StructuredDocumentation",
              "src": "965:426:52",
              "text": " @notice Implementation of an EIP-712 permit-style function for ERC-721 operator approvals. Allows\n an operator address to control all NFTs a given owner owns.\n @param owner The owner to set operator approvals for.\n @param operator The operator to approve.\n @param approved Whether to approve or revoke approval from the operator.\n @param sig The EIP712 signature struct."
            },
            "functionSelector": "89028a13",
            "id": 12501,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "permitForAll",
            "nameLocation": "1405:12:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12499,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12491,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "1435:5:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12501,
                  "src": "1427:13:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12490,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1427:7:52",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12493,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "1458:8:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12501,
                  "src": "1450:16:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12492,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1450:7:52",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12495,
                  "mutability": "mutable",
                  "name": "approved",
                  "nameLocation": "1481:8:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12501,
                  "src": "1476:13:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12494,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1476:4:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12498,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "1534:3:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12501,
                  "src": "1499:38:52",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_EIP712Signature_$12669_calldata_ptr",
                    "typeString": "struct DataTypes.EIP712Signature"
                  },
                  "typeName": {
                    "id": 12497,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12496,
                      "name": "DataTypes.EIP712Signature",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12669,
                      "src": "1499:25:52"
                    },
                    "referencedDeclaration": 12669,
                    "src": "1499:25:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_EIP712Signature_$12669_storage_ptr",
                      "typeString": "struct DataTypes.EIP712Signature"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1417:126:52"
            },
            "returnParameters": {
              "id": 12500,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1552:0:52"
            },
            "scope": 12523,
            "src": "1396:157:52",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12502,
              "nodeType": "StructuredDocumentation",
              "src": "1559:232:52",
              "text": " @notice Burns an NFT, removing it from circulation and essentially destroying it. This function can only\n be called by the NFT to burn's owner.\n @param tokenId The token ID of the token to burn."
            },
            "functionSelector": "42966c68",
            "id": 12507,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "1805:4:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12504,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1818:7:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12507,
                  "src": "1810:15:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12503,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1810:7:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1809:17:52"
            },
            "returnParameters": {
              "id": 12506,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1835:0:52"
            },
            "scope": 12523,
            "src": "1796:40:52",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12508,
              "nodeType": "StructuredDocumentation",
              "src": "1842:285:52",
              "text": " @notice Implementation of an EIP-712 permit-style function for token burning. Allows anyone to burn\n a token on behalf of the owner with a signature.\n @param tokenId The token ID of the token to burn.\n @param sig The EIP712 signature struct."
            },
            "functionSelector": "dd69cdb1",
            "id": 12516,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burnWithSig",
            "nameLocation": "2141:11:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12510,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2161:7:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12516,
                  "src": "2153:15:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12509,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2153:7:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12513,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "2205:3:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12516,
                  "src": "2170:38:52",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_EIP712Signature_$12669_calldata_ptr",
                    "typeString": "struct DataTypes.EIP712Signature"
                  },
                  "typeName": {
                    "id": 12512,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12511,
                      "name": "DataTypes.EIP712Signature",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12669,
                      "src": "2170:25:52"
                    },
                    "referencedDeclaration": 12669,
                    "src": "2170:25:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_EIP712Signature_$12669_storage_ptr",
                      "typeString": "struct DataTypes.EIP712Signature"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2152:57:52"
            },
            "returnParameters": {
              "id": 12515,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2218:0:52"
            },
            "scope": 12523,
            "src": "2132:87:52",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12517,
              "nodeType": "StructuredDocumentation",
              "src": "2225:130:52",
              "text": " @notice Returns the domain separator for this NFT contract.\n @return bytes32 The domain separator."
            },
            "functionSelector": "ed24911d",
            "id": 12522,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDomainSeparator",
            "nameLocation": "2369:18:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12518,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2387:2:52"
            },
            "returnParameters": {
              "id": 12521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12520,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12522,
                  "src": "2413:7:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12519,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2413:7:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2412:9:52"
            },
            "scope": 12523,
            "src": "2360:62:52",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 12524,
        "src": "413:2011:52",
        "usedErrors": []
      }
    ],
    "src": "43:2382:52"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/interfaces/ILensNFTBase.sol",
    "exportedSymbols": {
      "DataTypes": [
        12894
      ],
      "ILensNFTBase": [
        12523
      ]
    },
    "id": 12524,
    "license": "AGPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 12474,
        "literals": [
          "solidity",
          "0.8",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "43:23:52"
      },
      {
        "absolutePath": "project:/contracts/libraries/DataTypes.sol",
        "file": "../libraries/DataTypes.sol",
        "id": 12476,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 12524,
        "sourceUnit": 12895,
        "src": "68:53:52",
        "symbolAliases": [
          {
            "foreign": {
              "id": 12475,
              "name": "DataTypes",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "76:9:52",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ILensNFTBase",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 12477,
          "nodeType": "StructuredDocumentation",
          "src": "123:289:52",
          "text": " @title ILensNFTBase\n @author Lens Protocol\n @notice This is the interface for the LensNFTBase contract, from which all Lens NFTs inherit.\n It is an expansion of a very slightly modified ERC721Enumerable contract, which allows expanded\n meta-transaction functionality."
        },
        "fullyImplemented": false,
        "id": 12523,
        "linearizedBaseContracts": [
          12523
        ],
        "name": "ILensNFTBase",
        "nameLocation": "423:12:52",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 12478,
              "nodeType": "StructuredDocumentation",
              "src": "442:383:52",
              "text": " @notice Implementation of an EIP-712 permit function for an ERC-721 NFT. We don't need to check\n if the tokenId exists, since the function calls ownerOf(tokenId), which reverts if the tokenId does\n not exist.\n @param spender The NFT spender.\n @param tokenId The NFT token ID to approve.\n @param sig The EIP712 signature struct."
            },
            "functionSelector": "7ef67f99",
            "id": 12488,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "permit",
            "nameLocation": "839:6:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12486,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12480,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "863:7:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12488,
                  "src": "855:15:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12479,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "855:7:52",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12482,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "888:7:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12488,
                  "src": "880:15:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12481,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "880:7:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12485,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "940:3:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12488,
                  "src": "905:38:52",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_EIP712Signature_$12669_calldata_ptr",
                    "typeString": "struct DataTypes.EIP712Signature"
                  },
                  "typeName": {
                    "id": 12484,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12483,
                      "name": "DataTypes.EIP712Signature",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12669,
                      "src": "905:25:52"
                    },
                    "referencedDeclaration": 12669,
                    "src": "905:25:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_EIP712Signature_$12669_storage_ptr",
                      "typeString": "struct DataTypes.EIP712Signature"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "845:104:52"
            },
            "returnParameters": {
              "id": 12487,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "958:0:52"
            },
            "scope": 12523,
            "src": "830:129:52",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12489,
              "nodeType": "StructuredDocumentation",
              "src": "965:426:52",
              "text": " @notice Implementation of an EIP-712 permit-style function for ERC-721 operator approvals. Allows\n an operator address to control all NFTs a given owner owns.\n @param owner The owner to set operator approvals for.\n @param operator The operator to approve.\n @param approved Whether to approve or revoke approval from the operator.\n @param sig The EIP712 signature struct."
            },
            "functionSelector": "89028a13",
            "id": 12501,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "permitForAll",
            "nameLocation": "1405:12:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12499,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12491,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "1435:5:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12501,
                  "src": "1427:13:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12490,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1427:7:52",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12493,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "1458:8:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12501,
                  "src": "1450:16:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12492,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1450:7:52",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12495,
                  "mutability": "mutable",
                  "name": "approved",
                  "nameLocation": "1481:8:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12501,
                  "src": "1476:13:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12494,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1476:4:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12498,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "1534:3:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12501,
                  "src": "1499:38:52",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_EIP712Signature_$12669_calldata_ptr",
                    "typeString": "struct DataTypes.EIP712Signature"
                  },
                  "typeName": {
                    "id": 12497,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12496,
                      "name": "DataTypes.EIP712Signature",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12669,
                      "src": "1499:25:52"
                    },
                    "referencedDeclaration": 12669,
                    "src": "1499:25:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_EIP712Signature_$12669_storage_ptr",
                      "typeString": "struct DataTypes.EIP712Signature"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1417:126:52"
            },
            "returnParameters": {
              "id": 12500,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1552:0:52"
            },
            "scope": 12523,
            "src": "1396:157:52",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12502,
              "nodeType": "StructuredDocumentation",
              "src": "1559:232:52",
              "text": " @notice Burns an NFT, removing it from circulation and essentially destroying it. This function can only\n be called by the NFT to burn's owner.\n @param tokenId The token ID of the token to burn."
            },
            "functionSelector": "42966c68",
            "id": 12507,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "1805:4:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12504,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1818:7:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12507,
                  "src": "1810:15:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12503,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1810:7:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1809:17:52"
            },
            "returnParameters": {
              "id": 12506,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1835:0:52"
            },
            "scope": 12523,
            "src": "1796:40:52",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12508,
              "nodeType": "StructuredDocumentation",
              "src": "1842:285:52",
              "text": " @notice Implementation of an EIP-712 permit-style function for token burning. Allows anyone to burn\n a token on behalf of the owner with a signature.\n @param tokenId The token ID of the token to burn.\n @param sig The EIP712 signature struct."
            },
            "functionSelector": "dd69cdb1",
            "id": 12516,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burnWithSig",
            "nameLocation": "2141:11:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12510,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2161:7:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12516,
                  "src": "2153:15:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12509,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2153:7:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12513,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "2205:3:52",
                  "nodeType": "VariableDeclaration",
                  "scope": 12516,
                  "src": "2170:38:52",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_EIP712Signature_$12669_calldata_ptr",
                    "typeString": "struct DataTypes.EIP712Signature"
                  },
                  "typeName": {
                    "id": 12512,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 12511,
                      "name": "DataTypes.EIP712Signature",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12669,
                      "src": "2170:25:52"
                    },
                    "referencedDeclaration": 12669,
                    "src": "2170:25:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_EIP712Signature_$12669_storage_ptr",
                      "typeString": "struct DataTypes.EIP712Signature"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2152:57:52"
            },
            "returnParameters": {
              "id": 12515,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2218:0:52"
            },
            "scope": 12523,
            "src": "2132:87:52",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 12517,
              "nodeType": "StructuredDocumentation",
              "src": "2225:130:52",
              "text": " @notice Returns the domain separator for this NFT contract.\n @return bytes32 The domain separator."
            },
            "functionSelector": "ed24911d",
            "id": 12522,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDomainSeparator",
            "nameLocation": "2369:18:52",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12518,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2387:2:52"
            },
            "returnParameters": {
              "id": 12521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12520,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12522,
                  "src": "2413:7:52",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12519,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2413:7:52",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2412:9:52"
            },
            "scope": 12523,
            "src": "2360:62:52",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 12524,
        "src": "413:2011:52",
        "usedErrors": []
      }
    ],
    "src": "43:2382:52"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.5",
  "updatedAt": "2022-04-22T14:49:53.867Z",
  "devdoc": {
    "author": "Lens Protocol",
    "kind": "dev",
    "methods": {
      "burn(uint256)": {
        "params": {
          "tokenId": "The token ID of the token to burn."
        }
      },
      "burnWithSig(uint256,(uint8,bytes32,bytes32,uint256))": {
        "params": {
          "sig": "The EIP712 signature struct.",
          "tokenId": "The token ID of the token to burn."
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "bytes32 The domain separator."
        }
      },
      "permit(address,uint256,(uint8,bytes32,bytes32,uint256))": {
        "params": {
          "sig": "The EIP712 signature struct.",
          "spender": "The NFT spender.",
          "tokenId": "The NFT token ID to approve."
        }
      },
      "permitForAll(address,address,bool,(uint8,bytes32,bytes32,uint256))": {
        "params": {
          "approved": "Whether to approve or revoke approval from the operator.",
          "operator": "The operator to approve.",
          "owner": "The owner to set operator approvals for.",
          "sig": "The EIP712 signature struct."
        }
      }
    },
    "title": "ILensNFTBase",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burns an NFT, removing it from circulation and essentially destroying it. This function can only be called by the NFT to burn's owner."
      },
      "burnWithSig(uint256,(uint8,bytes32,bytes32,uint256))": {
        "notice": "Implementation of an EIP-712 permit-style function for token burning. Allows anyone to burn a token on behalf of the owner with a signature."
      },
      "getDomainSeparator()": {
        "notice": "Returns the domain separator for this NFT contract."
      },
      "permit(address,uint256,(uint8,bytes32,bytes32,uint256))": {
        "notice": "Implementation of an EIP-712 permit function for an ERC-721 NFT. We don't need to check if the tokenId exists, since the function calls ownerOf(tokenId), which reverts if the tokenId does not exist."
      },
      "permitForAll(address,address,bool,(uint8,bytes32,bytes32,uint256))": {
        "notice": "Implementation of an EIP-712 permit-style function for ERC-721 operator approvals. Allows an operator address to control all NFTs a given owner owns."
      }
    },
    "notice": "This is the interface for the LensNFTBase contract, from which all Lens NFTs inherit. It is an expansion of a very slightly modified ERC721Enumerable contract, which allows expanded meta-transaction functionality.",
    "version": 1
  }
}