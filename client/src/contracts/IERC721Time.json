{
  "contractName": "IERC721Time",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintTimestampOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenDataOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "mintTimestamp",
              "type": "uint96"
            }
          ],
          "internalType": "struct IERC721Time.TokenData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintTimestampOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenDataOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"mintTimestamp\",\"type\":\"uint96\"}],\"internalType\":\"struct IERC721Time.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lens Protocol\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"exists(uint256)\":{\"params\":{\"tokenId\":\"The token ID of the NFT to check existence for.\"},\"returns\":{\"_0\":\"bool True if the token exists.\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mintTimestampOf(uint256)\":{\"params\":{\"tokenId\":\"The token ID of the NFT to query the mint timestamp for.\"},\"returns\":{\"_0\":\"uint256 mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary padding.\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenDataOf(uint256)\":{\"params\":{\"tokenId\":\"The token ID of the NFT to query the token data for.\"},\"returns\":{\"_0\":\"TokenData token data struct containing both the owner address and the mint timestamp.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"IERC721Time\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exists(uint256)\":{\"notice\":\"Returns whether a token with the given token ID exists.\"},\"mintTimestampOf(uint256)\":{\"notice\":\"Returns the mint timestamp associated with a given NFT, stored only once upon initial mint.\"},\"tokenDataOf(uint256)\":{\"notice\":\"Returns the token data associated with a given NFT. This allows fetching the token owner and mint timestamp in a single call.\"}},\"notice\":\"This is an expansion of the IERC721 interface that includes a struct for token data, which contains the token owner and the mint timestamp as well as associated getters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/core/base/IERC721Time.sol\":\"IERC721Time\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/core/base/IERC721Time.sol\":{\"keccak256\":\"0x7057c3e378b91935d558f286a4f1f42d48dd51303c5b184803ed140888c378cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7eee1cedbebada84b1e343a36729ef3d74bee5554ba447db850108f8b4572b7\",\"dweb:/ipfs/QmfEQv4RtVjpjRRa2F3jmdNhcfiCFe3c3sPeBng69ZzA64\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/**\n * @title IERC721Time\n * @author Lens Protocol\n *\n * @notice This is an expansion of the IERC721 interface that includes a struct for token data,\n * which contains the token owner and the mint timestamp as well as associated getters.\n */\ninterface IERC721Time is IERC721 {\n    /**\n     * @notice Contains the owner address and the mint timestamp for every NFT.\n     *\n     * Note: Instead of the owner address in the _tokenOwners private mapping, we now store it in the\n     * _tokenData mapping, alongside the unchanging mintTimestamp.\n     *\n     * @param owner The token owner.\n     * @param mintTimestamp The mint timestamp.\n     */\n    struct TokenData {\n        address owner;\n        uint96 mintTimestamp;\n    }\n\n    /**\n     * @notice Returns the mint timestamp associated with a given NFT, stored only once upon initial mint.\n     *\n     * @param tokenId The token ID of the NFT to query the mint timestamp for.\n     *\n     * @return uint256 mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary\n     * padding.\n     */\n    function mintTimestampOf(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\n     * mint timestamp in a single call.\n     *\n     * @param tokenId The token ID of the NFT to query the token data for.\n     *\n     * @return TokenData token data struct containing both the owner address and the mint timestamp.\n     */\n    function tokenDataOf(uint256 tokenId) external view returns (TokenData memory);\n\n    /**\n     * @notice Returns whether a token with the given token ID exists.\n     *\n     * @param tokenId The token ID of the NFT to check existence for.\n     *\n     * @return bool True if the token exists.\n     */\n    function exists(uint256 tokenId) external view returns (bool);\n}\n",
  "sourcePath": "/Users/korbinianabstreiter/crytoprojects/primetime/contracts/core/base/IERC721Time.sol",
  "ast": {
    "absolutePath": "project:/contracts/core/base/IERC721Time.sol",
    "exportedSymbols": {
      "IERC165": [
        2292
      ],
      "IERC721": [
        1553
      ],
      "IERC721Time": [
        7003
      ]
    },
    "id": 7004,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6968,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:27"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 6969,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7004,
        "sourceUnit": 1554,
        "src": "58:58:27",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 6971,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1553,
              "src": "385:7:27"
            },
            "id": 6972,
            "nodeType": "InheritanceSpecifier",
            "src": "385:7:27"
          }
        ],
        "canonicalName": "IERC721Time",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 6970,
          "nodeType": "StructuredDocumentation",
          "src": "118:241:27",
          "text": " @title IERC721Time\n @author Lens Protocol\n @notice This is an expansion of the IERC721 interface that includes a struct for token data,\n which contains the token owner and the mint timestamp as well as associated getters."
        },
        "fullyImplemented": false,
        "id": 7003,
        "linearizedBaseContracts": [
          7003,
          1553,
          2292
        ],
        "name": "IERC721Time",
        "nameLocation": "370:11:27",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "IERC721Time.TokenData",
            "id": 6977,
            "members": [
              {
                "constant": false,
                "id": 6974,
                "mutability": "mutable",
                "name": "owner",
                "nameLocation": "798:5:27",
                "nodeType": "VariableDeclaration",
                "scope": 6977,
                "src": "790:13:27",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 6973,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "790:7:27",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6976,
                "mutability": "mutable",
                "name": "mintTimestamp",
                "nameLocation": "820:13:27",
                "nodeType": "VariableDeclaration",
                "scope": 6977,
                "src": "813:20:27",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint96",
                  "typeString": "uint96"
                },
                "typeName": {
                  "id": 6975,
                  "name": "uint96",
                  "nodeType": "ElementaryTypeName",
                  "src": "813:6:27",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TokenData",
            "nameLocation": "770:9:27",
            "nodeType": "StructDefinition",
            "scope": 7003,
            "src": "763:77:27",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 6978,
              "nodeType": "StructuredDocumentation",
              "src": "846:341:27",
              "text": " @notice Returns the mint timestamp associated with a given NFT, stored only once upon initial mint.\n @param tokenId The token ID of the NFT to query the mint timestamp for.\n @return uint256 mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary\n padding."
            },
            "functionSelector": "50ddf35c",
            "id": 6985,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "mintTimestampOf",
            "nameLocation": "1201:15:27",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6981,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6980,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1225:7:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 6985,
                  "src": "1217:15:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6979,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1217:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1216:17:27"
            },
            "returnParameters": {
              "id": 6984,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6983,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 6985,
                  "src": "1257:7:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6982,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1257:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1256:9:27"
            },
            "scope": 7003,
            "src": "1192:74:27",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 6986,
              "nodeType": "StructuredDocumentation",
              "src": "1272:349:27",
              "text": " @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\n mint timestamp in a single call.\n @param tokenId The token ID of the NFT to query the token data for.\n @return TokenData token data struct containing both the owner address and the mint timestamp."
            },
            "functionSelector": "c0da9bcd",
            "id": 6994,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "tokenDataOf",
            "nameLocation": "1635:11:27",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6989,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6988,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1655:7:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 6994,
                  "src": "1647:15:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6987,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1647:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1646:17:27"
            },
            "returnParameters": {
              "id": 6993,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6992,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 6994,
                  "src": "1687:16:27",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TokenData_$6977_memory_ptr",
                    "typeString": "struct IERC721Time.TokenData"
                  },
                  "typeName": {
                    "id": 6991,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6990,
                      "name": "TokenData",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6977,
                      "src": "1687:9:27"
                    },
                    "referencedDeclaration": 6977,
                    "src": "1687:9:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TokenData_$6977_storage_ptr",
                      "typeString": "struct IERC721Time.TokenData"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1686:18:27"
            },
            "scope": 7003,
            "src": "1626:79:27",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 6995,
              "nodeType": "StructuredDocumentation",
              "src": "1711:212:27",
              "text": " @notice Returns whether a token with the given token ID exists.\n @param tokenId The token ID of the NFT to check existence for.\n @return bool True if the token exists."
            },
            "functionSelector": "4f558e79",
            "id": 7002,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "exists",
            "nameLocation": "1937:6:27",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6998,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6997,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1952:7:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 7002,
                  "src": "1944:15:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6996,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1944:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1943:17:27"
            },
            "returnParameters": {
              "id": 7001,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7000,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7002,
                  "src": "1984:4:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6999,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1984:4:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1983:6:27"
            },
            "scope": 7003,
            "src": "1928:62:27",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 7004,
        "src": "360:1632:27",
        "usedErrors": []
      }
    ],
    "src": "33:1960:27"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/core/base/IERC721Time.sol",
    "exportedSymbols": {
      "IERC165": [
        2292
      ],
      "IERC721": [
        1553
      ],
      "IERC721Time": [
        7003
      ]
    },
    "id": 7004,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6968,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:27"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 6969,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7004,
        "sourceUnit": 1554,
        "src": "58:58:27",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 6971,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1553,
              "src": "385:7:27"
            },
            "id": 6972,
            "nodeType": "InheritanceSpecifier",
            "src": "385:7:27"
          }
        ],
        "canonicalName": "IERC721Time",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 6970,
          "nodeType": "StructuredDocumentation",
          "src": "118:241:27",
          "text": " @title IERC721Time\n @author Lens Protocol\n @notice This is an expansion of the IERC721 interface that includes a struct for token data,\n which contains the token owner and the mint timestamp as well as associated getters."
        },
        "fullyImplemented": false,
        "id": 7003,
        "linearizedBaseContracts": [
          7003,
          1553,
          2292
        ],
        "name": "IERC721Time",
        "nameLocation": "370:11:27",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "IERC721Time.TokenData",
            "id": 6977,
            "members": [
              {
                "constant": false,
                "id": 6974,
                "mutability": "mutable",
                "name": "owner",
                "nameLocation": "798:5:27",
                "nodeType": "VariableDeclaration",
                "scope": 6977,
                "src": "790:13:27",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 6973,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "790:7:27",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6976,
                "mutability": "mutable",
                "name": "mintTimestamp",
                "nameLocation": "820:13:27",
                "nodeType": "VariableDeclaration",
                "scope": 6977,
                "src": "813:20:27",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint96",
                  "typeString": "uint96"
                },
                "typeName": {
                  "id": 6975,
                  "name": "uint96",
                  "nodeType": "ElementaryTypeName",
                  "src": "813:6:27",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TokenData",
            "nameLocation": "770:9:27",
            "nodeType": "StructDefinition",
            "scope": 7003,
            "src": "763:77:27",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 6978,
              "nodeType": "StructuredDocumentation",
              "src": "846:341:27",
              "text": " @notice Returns the mint timestamp associated with a given NFT, stored only once upon initial mint.\n @param tokenId The token ID of the NFT to query the mint timestamp for.\n @return uint256 mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary\n padding."
            },
            "functionSelector": "50ddf35c",
            "id": 6985,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "mintTimestampOf",
            "nameLocation": "1201:15:27",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6981,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6980,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1225:7:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 6985,
                  "src": "1217:15:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6979,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1217:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1216:17:27"
            },
            "returnParameters": {
              "id": 6984,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6983,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 6985,
                  "src": "1257:7:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6982,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1257:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1256:9:27"
            },
            "scope": 7003,
            "src": "1192:74:27",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 6986,
              "nodeType": "StructuredDocumentation",
              "src": "1272:349:27",
              "text": " @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\n mint timestamp in a single call.\n @param tokenId The token ID of the NFT to query the token data for.\n @return TokenData token data struct containing both the owner address and the mint timestamp."
            },
            "functionSelector": "c0da9bcd",
            "id": 6994,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "tokenDataOf",
            "nameLocation": "1635:11:27",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6989,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6988,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1655:7:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 6994,
                  "src": "1647:15:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6987,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1647:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1646:17:27"
            },
            "returnParameters": {
              "id": 6993,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6992,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 6994,
                  "src": "1687:16:27",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TokenData_$6977_memory_ptr",
                    "typeString": "struct IERC721Time.TokenData"
                  },
                  "typeName": {
                    "id": 6991,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6990,
                      "name": "TokenData",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6977,
                      "src": "1687:9:27"
                    },
                    "referencedDeclaration": 6977,
                    "src": "1687:9:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TokenData_$6977_storage_ptr",
                      "typeString": "struct IERC721Time.TokenData"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1686:18:27"
            },
            "scope": 7003,
            "src": "1626:79:27",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 6995,
              "nodeType": "StructuredDocumentation",
              "src": "1711:212:27",
              "text": " @notice Returns whether a token with the given token ID exists.\n @param tokenId The token ID of the NFT to check existence for.\n @return bool True if the token exists."
            },
            "functionSelector": "4f558e79",
            "id": 7002,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "exists",
            "nameLocation": "1937:6:27",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6998,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6997,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1952:7:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 7002,
                  "src": "1944:15:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6996,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1944:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1943:17:27"
            },
            "returnParameters": {
              "id": 7001,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7000,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7002,
                  "src": "1984:4:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6999,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1984:4:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1983:6:27"
            },
            "scope": 7003,
            "src": "1928:62:27",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 7004,
        "src": "360:1632:27",
        "usedErrors": []
      }
    ],
    "src": "33:1960:27"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.5",
  "updatedAt": "2022-04-22T14:49:53.818Z",
  "devdoc": {
    "author": "Lens Protocol",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "exists(uint256)": {
        "params": {
          "tokenId": "The token ID of the NFT to check existence for."
        },
        "returns": {
          "_0": "bool True if the token exists."
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "mintTimestampOf(uint256)": {
        "params": {
          "tokenId": "The token ID of the NFT to query the mint timestamp for."
        },
        "returns": {
          "_0": "uint256 mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary padding."
        }
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "tokenDataOf(uint256)": {
        "params": {
          "tokenId": "The token ID of the NFT to query the token data for."
        },
        "returns": {
          "_0": "TokenData token data struct containing both the owner address and the mint timestamp."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "title": "IERC721Time",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exists(uint256)": {
        "notice": "Returns whether a token with the given token ID exists."
      },
      "mintTimestampOf(uint256)": {
        "notice": "Returns the mint timestamp associated with a given NFT, stored only once upon initial mint."
      },
      "tokenDataOf(uint256)": {
        "notice": "Returns the token data associated with a given NFT. This allows fetching the token owner and mint timestamp in a single call."
      }
    },
    "notice": "This is an expansion of the IERC721 interface that includes a struct for token data, which contains the token owner and the mint timestamp as well as associated getters.",
    "version": 1
  }
}